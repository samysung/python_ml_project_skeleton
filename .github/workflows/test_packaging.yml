name: tests-packaging

on:

  schedule:
    - cron: "0 4 * * *"

env:
  CACHE_NUMBER: 0  # increase to reset cache manually

jobs:
  tests-package:
    name: "unit test the package"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.9, '3.10' ]
        include:
          - env: "package"
          - os: ubuntu-latest
            label: linux-64
            pip_path: ~/.cache/pip
            prefix: /usr/share/miniconda3/envs/test
          - os: macos-latest
            label: osx-64
            pip_path: ~/Library/Caches/pip
            prefix: /usr/share/miniconda3/envs/test
          - os: windows-latest
            pip_path: ~\AppData\Local\pip\Cache
            prefix: C:\Miniconda3\envs\test
    steps:
      - uses: actions/checkout@v2
      - name: check packaging file
        run: cat ${{ format('packaging/{0}_env.yml', matrix.env) }}
      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: ${{ matrix.env }}
          use-mamba: true
          python-version: ${{ matrix.python-version }}

      # - name: Set cache date
      #  run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - uses: actions/cache@v2
        with:
          path: ${{ matrix.prefix }}
          key: ${{ matrix.label }}-conda-${{ hashFiles(format('packaging/{0}_env.yml', matrix.env)) }}-${{ hashFiles(format('packaging/{0}_requirements.txt', matrix.env)) }}-${{ env.CACHE_NUMBER }}-${{ env.DATE }}
        id: cache

      - name: Update environment
        run: mamba env update -n ${{ matrix.env }} -f ${{ format('packaging/{0}_env.yml', matrix.env) }}
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Conda info
        shell: bash -l {0}
        run: |
          conda info -a
          conda list
      - name: install package with pip
        shell: bash -l {0}
        run: |
          pip install pmps
          python -c "import pmps"
